for (cat in categories) {
cat("\nVariable:", cat$variable, "\nCategories:", paste(cat$categories, collapse = ", "), "\n")
}
# Binary variables
binary_vars <- c("gender",
"nationality",
"p5_1", "p5_2", "p5_3",
"p5_4", "p5_5", "p5_6",
"p5_7", "p5_8",
"p6_1", "p6_2", "p6_3",
"p8",
"p9",
"p16")
pamplona[binary_vars] <- lapply(pamplona[binary_vars],
as.factor)
# Ordinal variables (trabajando con números)
ordinal_vars <- c("p7_1", "p7_2", "p7_3",
"p7_4", "p7_5", "p7_6",
"p7_7", "p7_8",
"p10_1", "p10_2", "p10_3",
"p10_4", "p10_5", "p10_6",
"p10_7",
"p12",
"p15",
"p19",
"education",
"income")
pamplona[ordinal_vars] <- lapply(pamplona[ordinal_vars],
function(x) factor(x,
ordered = TRUE))
# Categorical variables
categorical_vars <- c("barrio",
"p13a", "p13b",
"p18",
"employment")
pamplona[categorical_vars] <- lapply(pamplona[categorical_vars],
as.factor)
# Numeric variables
numeric_vars <- c("age",
"p11_1", "p11_2",
"p14")
pamplona[numeric_vars] <- lapply(pamplona[numeric_vars],
as.numeric)
# See % of missing values per variable
sapply(pamplona,
function(x) sum(is.na(x))*100/nrow(pamplona))
# Remove variables with more than 40% NA
pamplona <- pamplona |>
dplyr::select(-c("p17",
"p17_otros"))
# Select categorical variables (non-numeric) for imputation
vars_cat <- pamplona |> dplyr::select(-c(where(is.numeric)))
# Impute missing values for categorical variable 'p18' using CART method
mice_imputed_p18 <- data.frame(
original = vars_cat$p18,
imputed_cart = complete(mice(vars_cat,
m = 2,
method = "cart",
seed = 123))$p18)
# Recodificación cuartos ideales
# Ordenamos los datos
p112_sorted <- sort(perception3$p11_2)
# Número de observaciones
n <- length(p112_sorted)
# Cálculo de j y h
j <- round((n / 4) + (5 / 12))
h <- (n / 4) + (5 / 12) - j
# Cálculo de los cuartiles ideales
qi2 <- (1 - h) * p112_sorted[j] + h * p112_sorted[j + 1]
qs2 <- (1 - h) * p112_sorted[n - j + 1] + h * p112_sorted[n - j]
# Imprimir los cuartiles ideales
cat("Cuartil inferior (qi):", qi2, "\n")
cat("Cuartil superior (qs):", qs2, "\n")
# Recodificar la variable p11_2 utilizando los cuartiles ideales
perception3$p11_2r_recoded_ideal <- cut(perception3$p11_2,
breaks = c(min(perception3$p11_2), qi2, qs2, max(perception3$p11_2)),
include.lowest = TRUE,
labels = c("Bajo", "Medio", "Alto"))
# Ver la distribución de las nuevas categorías
table(perception3$p11_2r_recoded_ideal)
# Ver los valores que caen en cada categoría
# Categoría "Bajo"
bajo_values <- subset(perception3, p11_2r_recoded_ideal == "Bajo")
summary(bajo_values$p11_2)
# Categoría "Medio"
medio_values <- subset(perception3, p11_2r_recoded_ideal == "Medio")
summary(medio_values$p11_2)
# Categoría "Alto"
alto_values <- subset(perception3, p11_2r_recoded_ideal == "Alto")
summary(alto_values$p11_2)
perception3 <-  perception3 |>
dplyr::select(-p11_1, -p11_2) # no estoy muy segura de por qué aquí elimino p7_1, p10_3 y p10_7.
fitord <- princals(perception3,
ordinal = T,
ndim = 3)  ## default is ordinal=TRUE
summary(fitord)
# Running CATPCA to test the results
perception1 <-  perception1 |>
dplyr::select(-p11_1, -p11_2) # no estoy muy segura de por qué aquí elimino p7_1, p10_3 y p10_7.
perception1 <-  perception_vars
# Grouping adjacent categories
perception1$p11_1r <- ifelse(perception1$p11_1 %in% 1:4, 1,
ifelse(perception1$p11_1 %in% 5:7, 2, 3))
perception1$p11_2r <- ifelse(perception1$p11_2 %in% 1:4, 1,
ifelse(perception1$p11_2 %in% 5:7, 2, 3))
View(perception1)
# Running CATPCA to test the results
perception1 <-  perception1 |>
dplyr::select(-p11_1, -p11_2) # no estoy muy segura de por qué aquí elimino p7_1, p10_3 y p10_7.
fitord <- princals(perception1,
ordinal = T,
ndim = 3)  ## default is ordinal=TRUE
summary(fitord)
# CATPCA results: 45.71, 59.55, 70.72 (3 first components)
fitord <- princals(perception2,
ordinal = T,
ndim = 3)  ## default is ordinal = TRUE
summary(fitord)
# Checking component loadings
fitord$loadings
# Loadings plot or biplot
plot(fitord, "loadplot",
main = "Loadings Plot ABC Data")  ## aspect ratio = 1
# mirar este gráfico con iñaki
plot(fitord, "biplot",
main = "Biplot ABC Data")
# Screeplot
plot(fitord, "screeplot")
# CATPCA results: 44.81, 60.76, 71.03 (3 first components)
table(perception3$p11_1r_recoded_ideal)
component_scores <- fitord$objects[, 1:3]
component_scores
# Extract component scores. COMPROBAR porque no sé si lo saca bien; aparecen porcentajes por lo que en términos de contenido debería estar bien pero los nombres de las variables no están bien
component_scores <- fitord$objects[, 1:2]
component_scores
# Rename columns for clarity.
colnames(component_scores) <- c("gen_ins", "inst_ins")
# Add to pamplonaf
pamplonaf <- cbind(pamplonaf, component_scores)
View(pamplona)
View(pamplonaf)
pamplonaf <-  pamplonaf |>  dplyr::select(-catpca1, -catpca2, -catpca3)
# Add to pamplonaf
pamplonaf <- cbind(pamplonaf, component_scores)
View(pamplonaf)
pamplonaf <-  pamplonaf |>  dplyr::select(-gen_ins, -inst_ins)
View(pamplonaf)
# Add to pamplonaf
pamplonaf <- cbind(pamplonaf, component_scores)
View(pamplonaf)
View(pampre)
pampre <- pamplonaf |>
dplyr::select(-p7_2, -p7_3,
-p7_4, -p7_5, -p7_6,
-p10_1, -p10_2,
-p11_1, -p11_2, ) |>
mutate(crime_index = as.numeric(crime_index))
View(pampre)
# Assuming 'pamplonaf' is your dataset
# Replace 'dependent_var' with your dependent variable's name
# Replace 'independent_var1', 'independent_var2', ... with your independent variables' names
model <- lm(gen_ins ~ barrio + gender + age + nationality + employment + education + income + crime_index, data = pampre)
summary(model)
cor(pampre[, c("gen_ins", "inst_ins")], use = "complete.obs")
# Converting ordinal variables to ordered factors
make_ordered <- function(data, vars) {
for (var in vars) {
data[[var]] <- as.ordered(data[[var]])
}
return(data)
}
pampre <- make_ordered(pampre, c("p7_6", "p7_7", "p10_4", "p10_5",
"p10_6", "p15", "p19", "education",
"income"))
pampre <- make_ordered(pampre, c("p7_7", "p10_4", "p10_5",
"p10_6", "p15", "p19", "education",
"income"))
# Converting ordinal variables to ordered factors
make_ordered <- function(data, vars) {
for (var in vars) {
data[[var]] <- as.ordered(data[[var]])
}
return(data)
}
pampre <- make_ordered(pampre, c("p7_7", "p10_4", "p10_5",
"p10_6", "p15", "p19", "education",
"income"))
# Re-encodes binary variables to 0/1
recode_binary <- function(data, vars, value_to_keep = 1, new_value = 1, other_value = 0) {
for (var in vars) {
data[[var]] <- ifelse(data[[var]] == value_to_keep, new_value, other_value)
}
return(data)
}
pampre <- recode_binary(pampre, vars = c("gender", "nationality", "victimized", "p16"))
View(pampre)
pvictimisation_vars  <- pamplonaf |>
dplyr::select(p5_1, p5_2, p5_3,
p5_4, p5_5, p5_6,
p5_7, p5_8,
p6_1, p6_2, p6_3)
# descriptive analysis
univariate_analysis(pvictimisation_vars)
# índice sintético (con ponderaciones)
# en función de lo que me comente iñaki probamos a hacerlo como el crime index
pesos <- c(
p5_1 = 4,
p5_2 = 14,
p5_3 = 14,
p5_4 = 16,
p5_5 = 8,
p5_6 = 8,
p5_7 = 8,
p5_8 = 4,
p6_1 = 2.5,
p6_2 = 4,
p6_3 = 10
)
# Aplica los pesos usando sweep (más controlado que mapply en este caso)
weighted_matrix <- sweep(as.matrix(pvictimisation_vars), 2, pesos[names(pvictimisation_vars)], `*`)
# categoric past victimization
pvictimisation_vars$victim_cat <- cut(
pvictimisation_vars$victimized_w,
breaks = c(-0.01, 0, 8, 16, Inf),
labels = c("none", "low", "moderate", "severe")
)
# Aplica los pesos usando sweep (más controlado que mapply en este caso)
weighted_matrix <- sweep(as.matrix(pvictimisation_vars), 2, pesos[names(pvictimisation_vars)], `*`)
pampre <- recode_binary(pampre, vars = c("gender", "nationality", "p16"))
# Standardizes numeric variables using Z-scores
pampre$crime_index_z <- scale(pampre$crime_index)
pampre$agez <- scale(pampre$age)
pampre$p14z <- scale(pampre$p14) # es una escala del 1 al 10 pero como no la trato como ordinal (no sé si debería, la trato como numérica y la escalo)
pampre$catpca1 <- scale(pampre$catpca1)
pampre$gen_ins <- scale(pampre$gen_ins)
# Cleaning up the dataset by removing unstandardized columns
pampre <- pampre |> dplyr::select(-crime_index, -p14, -age)
# SOCIODEMOGRÁFICAS
model_soc <- lm(gen_ins ~ gender + education + income + employment + gender*income, data = pampre)
summary(model_soc)
# SOCIODEMOGRÁFICAS
model_soc <- lm(gen_ins ~ gender + education + income + employment, data = pampre)
summary(model_soc)
# RECODIFICAR INCOME, EDUCATION Y EMPLOYMENT PARA REDUCIR LAS CATEGORÍAS.
plot(pampre2$income)
pampre <- pampre |>
# EDUCATION: categories 3 and 4 are both secundary education, collapsed into one cat.
mutate(education = case_when(education %in% c("3", "4") ~ "3",
education == "5" ~ "4",
TRUE ~ education  # Keep all other values unchanged
)) |>
mutate(education = as.ordered(education))
pampre <- pampre |>
# EMPLOYMENT: categories 3 and 4 are both secundary employment, collapsed into one cat.
mutate(employment = case_when(employment %in% c("1", "2") ~ "1",
employment %in% c("3", "4") ~ "2",
employment %in% c("6", "7", "8") ~ "3",
TRUE ~ employment  # Keep all other values unchanged
)) |>
mutate(employment = as.ordered(employment))
# no me gusta esta recodificación buscar otra
pampre <- pampre |>
# EMPLOYMENT: categories 3 and 4 are both secundary employment, collapsed into one cat.
mutate(income = case_when(income %in% c("1", "2") ~ "1",
income %in% c("3", "4") ~ "2",
income %in% c("5", "6", "7") ~ "3",
income %in% c("8", "9", "10") ~ "4",
TRUE ~ income  # Keep all other values unchanged
)) |>
mutate(income = as.ordered(income))
# SOCIODEMOGRÁFICAS
model_soc <- lm(gen_ins ~ gender + education + income + employment, data = pampre)
summary(model_soc)
# SOCIODEMOGRÁFICAS
model_soc <- lm(gen_ins ~ gender + education + income + employment + gender*income, data = pampre)
summary(model_soc)
# no sé si esta p7 y las p10 debería meterlas en el safety perception index. despues de hacer los modelos y ordenarlo todo, probar.
model_rest <- lm(catpca1 ~ p16 +  p7_7 + p10_4 + p10_5 + p10_6 + p13a + p13b + p15 + p18 + p14z, data = pampre)
# no sé si esta p7 y las p10 debería meterlas en el safety perception index. despues de hacer los modelos y ordenarlo todo, probar.
model_rest <- lm(gen_ins ~ p16 + victimized + p7_7 + p10_4 + p10_5 + p10_6 + p13a + p13b + p15 + p18 + p14z, data = pampre)
# no sé si esta p7 y las p10 debería meterlas en el safety perception index. despues de hacer los modelos y ordenarlo todo, probar.
model_rest <- lm(gen_ins ~ p16 +  p7_7 + p10_4 + p10_5 + p10_6 + p13a + p13b + p15 + p18 + p14z, data = pampre)
summary(model_rest)
# Harm-adjusted fine conversion factor
fine_factor <- 0.25
# Function to compute expected severity
weighted_severity <- function(prison_min, prison_max, fine_min = NA, fine_max = NA, fine_weight = 0.6, prison_weight = 0.4) {
prison_mid <- (prison_min + prison_max) / 2
fine_mid <- if (!is.na(fine_min) && !is.na(fine_max)) (fine_min + fine_max) / 2 else 0
fine_adjusted <- fine_mid * fine_factor
expected <- fine_weight * fine_adjusted + prison_weight * prison_mid
return(expected)
}
# Compute weights relative to reference (0.25 years)
reference_sentence <- 0.25
# Apply to mixed-sentence crimes
lesiones_expected <- weighted_severity(prison_min = 0.25, prison_max = 1,
fine_min = 0.5, fine_max = 2)  # fine in years
hurtos_expected <- weighted_severity(prison_min = 0.5, prison_max = 1.5,
fine_min = 1/12, fine_max = 3/12)  # months to years
# Compute weights
lesiones_weight <- lesiones_expected / reference_sentence
hurtos_weight <- hurtos_expected / reference_sentence
ponderaciones <- c(
"Homicidios dolosos y asesinatos consumados" = 50,
"Homicidios dolosos y asesinatos en grado tentativa" = 80,
"Delitos graves y menos graves de lesiones y riña tumultuaria" = lesiones_weight,
"Delitos contra la libertad sexual" = 10,
"Robos con violencia e intimidación" = 14,
"Robos con fuerza en domicilios, establecimientos y otras instalaciones" = 8,
"Hurtos" = hurtos_weight,
"Sustracciones de vehículos" = 1.3,
"Tráfico de drogas" = 18,
"Resto de criminalidad CONVENCIONAL" = 0.25 # le pongo el baseline por que no sé qué ponerle
)
ponderaciones
ponderaciones <- c(
"Homicidios dolosos y asesinatos consumados" = 50,
"Homicidios dolosos y asesinatos en grado tentativa" = 80,
"Delitos graves y menos graves de lesiones y riña tumultuaria" = lesiones_weight,
"Delitos contra la libertad sexual" = 10,
"Robos con violencia e intimidación" = 14,
"Robos con fuerza en domicilios, establecimientos y otras instalaciones" = 8,
"Hurtos" = hurtos_weight,
"Sustracciones de vehículos" = 1.3,
"Tráfico de drogas" = 18,
"Resto de criminalidad CONVENCIONAL" = 0.25
)
# Apply the weights to the relative values of the crimes:
crime <- delitosf %>%
mutate(n = as.numeric(n)) |>
mutate(total_n = sum(n, na.rm = TRUE),
num_relativo = n / total_n,  # getting relative number
ponderacion = num_relativo * ponderaciones[tipo_penal]) |>
# applying weights
summarise(crime_index = sum(ponderacion))
# Extract crime index value
crime_value <- crime$crime_index[1]
# Add the crime_index column to pamplonaf
pamplonaf <- pamplonaf %>%
mutate(crime_index = crime_value)
# Extract component scores.
component_scores <- fitord$objects[, 1:2]
# Rename columns for clarity.
colnames(component_scores) <- c("gen_ins", "inst_ins")
# Add to pamplonaf
pamplonaf <- cbind(pamplonaf, component_scores)
pampre <- pamplonaf |>
dplyr::select(-p7_2, -p7_3,
-p7_4, -p7_5, -p7_6,
-p10_1, -p10_2,
-p11_1, -p11_2, ) |>
mutate(crime_index = as.numeric(crime_index))
View(pampre)
rm(pampre)
View(pamplonaf)
pamplonaf <- pamplonaf |> dplyr::select(-gen_ins, -inst_ins)
# Add the crime_index column to pamplonaf
pamplonaf <- pamplonaf %>%
mutate(crime_index = crime_value)
# Extract crime index value
crime_value <- crime$crime_index[1]
# Add the crime_index column to pamplonaf
pamplonaf <- pamplonaf %>%
mutate(crime_index = crime_value)
# Extract component scores.
component_scores <- fitord$objects[, 1:2]
# Rename columns for clarity.
colnames(component_scores) <- c("gen_ins", "inst_ins")
# Add to pamplonaf
pamplonaf <- cbind(pamplonaf, component_scores)
pampre <- pamplonaf |>
dplyr::select(-p7_2, -p7_3,
-p7_4, -p7_5, -p7_6,
-p10_1, -p10_2,
-p11_1, -p11_2, ) |>
mutate(crime_index = as.numeric(crime_index))
View(pampre)
View(pampre)
model <- lm(gen_ins ~ barrio + gender + age + nationality + employment + education + income + crime_index, data = pampre)
summary(model)
# recoding INCOME, EDUCATION, EMPLOYMENT to reduce the number of categories
pampre <- pampre |>
# EDUCATION: categories 3 and 4 are both secundary education, collapsed into one cat.
mutate(education = case_when(education %in% c("3", "4") ~ "3",
education == "5" ~ "4",
TRUE ~ education  # Keep all other values unchanged
)) |>
mutate(education = as.ordered(education))
pampre <- pampre |>
# EMPLOYMENT: categories 3 and 4 are both secundary employment, collapsed into one cat.
mutate(employment = case_when(employment %in% c("1", "2") ~ "1",
employment %in% c("3", "4") ~ "2",
employment %in% c("6", "7", "8") ~ "3",
TRUE ~ employment  # Keep all other values unchanged
)) |>
mutate(employment = as.ordered(employment))
# no me gusta esta recodificación buscar otra
pampre <- pampre |>
# INCOME
mutate(income = case_when(income %in% c("1", "2") ~ "1",
income %in% c("3", "4") ~ "2",
income %in% c("5", "6", "7") ~ "3",
income %in% c("8", "9", "10") ~ "4",
TRUE ~ income  # Keep all other values unchanged
)) |>
mutate(income = as.ordered(income))
View(pampre)
View(pampre)
# Converting ordinal variables to ordered factors
make_ordered <- function(data, vars) {
for (var in vars) {
data[[var]] <- as.ordered(data[[var]])
}
return(data)
}
pampre <- make_ordered(pampre, c("p7_1", "p7_7", "p7_8",
"p10_3", "p10_4", "p10_5", "p10_6", "p10_7",
"p12", "p15", "p19",
"employment", "education", "income"))
# Re-encodes binary variables to 0/1
recode_binary <- function(data, vars, value_to_keep = 1, new_value = 1, other_value = 0) {
for (var in vars) {
data[[var]] <- ifelse(data[[var]] == value_to_keep, new_value, other_value)
}
return(data)
}
# recoding INCOME, EDUCATION, EMPLOYMENT to reduce the number of categories
pampre <- pampre |>
# EDUCATION: categories 3 and 4 are both secundary education, collapsed into one cat.
mutate(education = case_when(education %in% c("1", "2") ~ "1",
education %in% c("3", "4") ~ "2",
education == "5" ~ "3",
TRUE ~ education  # Keep all other values unchanged
)) |>
mutate(education = as.ordered(education))
# Converting ordinal variables to ordered factors
make_ordered <- function(data, vars) {
for (var in vars) {
data[[var]] <- as.ordered(data[[var]])
}
return(data)
}
pampre <- make_ordered(pampre, c("p7_1", "p7_7", "p7_8",
"p10_3", "p10_4", "p10_5", "p10_6", "p10_7",
"p12", "p15", "p19",
"employment", "education", "income"))
# Re-encodes binary variables to 0/1
recode_binary <- function(data, vars, value_to_keep = 1, new_value = 1, other_value = 0) {
for (var in vars) {
data[[var]] <- ifelse(data[[var]] == value_to_keep, new_value, other_value)
}
return(data)
}
# índice sintético (con ponderaciones)
# en función de lo que me comente iñaki probamos a hacerlo como el crime index
pesos <- c(
p5_1 = 4,
p5_2 = 14,
p5_3 = 14,
p5_4 = 16,
p5_5 = 8,
p5_6 = 8,
p5_7 = 8,
p5_8 = 4,
p6_1 = 2.5,
p6_2 = 4,
p6_3 = 10
)
# Aplica los pesos usando sweep (más controlado que mapply en este caso)
weighted_matrix <- sweep(as.matrix(pvictimisation_vars), 2, pesos[names(pvictimisation_vars)], `*`)
pampre <- recode_binary(pampre, vars = c("gender", "nationality", "victimized",
"p8", "p9","p16"))
pampre <- recode_binary(pampre, vars = c("gender", "nationality", "victimized",
"p8", "p9","p16"))
# Re-encodes binary variables to 0/1
recode_binary <- function(data, vars, value_to_keep = 1, new_value = 1, other_value = 0) {
for (var in vars) {
data[[var]] <- ifelse(data[[var]] == value_to_keep, new_value, other_value)
}
return(data)
}
pampre <- recode_binary(pampre, vars = c("gender", "nationality", "victimized",
"p8", "p9","p16"))
pampre <- recode_binary(pampre, c("gender", "nationality", "victimized",
"p8", "p9","p16"))
pampre <- recode_binary(pampre, c("gender", "nationality",
"p8", "p9","p16"))
# Aplicar el cambio de 1 (Sí) a 1 y 2 (No) a 0 en pvictimisation_vars
pvictimisation_vars[] <- lapply(pvictimisation_vars,
function(x) ifelse(x == 1, 1, 0))
# índice sintético (sin ponderaciones): al menos una victimización (1), sin victimización (0)
pvictimisation_vars$victimized <- ifelse(rowSums(pvictimisation_vars[],
na.rm = TRUE) > 0, 1, 0)
table(pvictimisation_vars$victimized)
# Standardizes numeric variables using Z-scores
pampre$crime_index_z <- scale(pampre$crime_index)
pampre$agez <- scale(pampre$age)
pampre$p14z <- scale(pampre$p14) # es una escala del 1 al 10 pero como no la trato como ordinal (no sé si debería, la trato como numérica y la escalo)
table(pampre$p14)
# Cleaning up the dataset by removing unstandardized columns
pampre <- pampre |> dplyr::select(-crime_index, -p14, -age)
cor(pampre[, c("gen_ins", "inst_ins")], use = "complete.obs")
# SOCIODEMOGRÁFICAS
model_soc <- lm(gen_ins ~ gender + education + income + employment + gender*income, data = pampre)
summary(model_soc)
# no sé si esta p7 y las p10 debería meterlas en el safety perception index. despues de hacer los modelos y ordenarlo todo, probar.
model_rest <- lm(gen_ins ~ p16 + victimized + p7_7 + p10_4 + p10_5 + p10_6 + p13a + p13b + p15 + p18 + p14z, data = pampre)
# no sé si esta p7 y las p10 debería meterlas en el safety perception index. despues de hacer los modelos y ordenarlo todo, probar.
model_rest <- lm(gen_ins ~ p16
+ p7_7 + p10_4 + p10_5 + p10_6 + p13a + p13b + p15 + p18 + p14z, data = pampre)
summary(model_rest)
