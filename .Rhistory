buildng %in% c("terrace", "greenhouse",
"commercial", "religious",
"church", "public",
"civic", "chapel",
"cathedral", "stadium") ~ "leisure"
buildng %in% c("industrial", "hotel",
"hospital", "office", "college",
"warehouse", "government",
"kindergarten", "university",
"fire_station", "townhall") ~ "work_place", TRUE ~ buildng))
# Creating a new grouping variable to merge selected neighborhoods
edificios <- edificios |>
mutate(bldng_t = case_when(buildng %in% c("apartments", "residential",
"house", "semidetached_house",
"detached") ~ "residence",
buildng %in% c("terrace", "greenhouse",
"commercial", "religious",
"church", "public",
"civic", "chapel",
"cathedral", "stadium") ~ "leisure"
buildng %in% c("industrial", "hotel",
"hospital", "office", "college",
"warehouse", "government",
"kindergarten", "university",
"fire_station", "townhall") ~ "work_place", TRUE ~ buildng))
# Creating a new grouping variable to merge selected neighborhoods
edificios <- edificios |>
mutate(bldng_t = case_when(buildng %in% c("apartments", "residential", "house", "semidetached_house", "detached") ~ "residence",
buildng %in% c("terrace", "greenhouse", "commercial", "religious", "church", "public",
"civic", "chapel", "cathedral", "stadium") ~ "leisure",
buildng %in% c("industrial", "hotel", "hospital", "office", "college", "warehouse",
"government", "kindergarten", "university", "fire_station", "townhall") ~ "work_place",
TRUE ~ buildng
))
barrios <- st_read("pamplona_barrios.shp")
pacman::p_load(tidyverse, skimr, DataExplorer, labelled,
stringr, dplyr, tidyr, forcats, haven,
memisc, DataExplorer, caret, FactoMineR,
factoextra, mice, missMDA, cowplot, cv,
janitor, pdftools, Gifi, olsrr, car, MVN,
sandwich, lmtest, boot, sf)
barrios <- st_read("pamplona_barrios.shp")
barrios <- st_read("data for GAMA/osm and shapefiles/pamplona_barrios/pamplona_barrios.shp")
farolas <- st_read("NO USO/ALUM_Pto_PuntosLuz/ALUM_Pto_PuntosLuz.shp")
st_crs(farolas)
st_crs(barrios)
st_crs(farolas)
st_crs(barrios)
st_crs(farolas)
st_crs(barrios)
farolas_por_barrio <- st_join(farolas, barrios, left = FALSE)
conteo_farolas <- farolas_por_barrio %>%
count(nombre_barrio_columna)  # Reemplaza con el nombre real del campo de barrio
View(farolas)
View(farolas_por_barrio)
conteo_farolas <- farolas_por_barrio %>%
count(BARRIO)  # Reemplaza con el nombre real del campo de barrio
View(conteo_farolas)
farolas <- st_transform(farolas, st_crs(barrios))
conteo_farolas <- farolas_por_barrio %>%
count(BARRIO)  # Reemplaza con el nombre real del campo de barrio
View(conteo_farolas)
barrios_area <- barrios %>%
mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6)
lum_area <- farolas_barrio %>%
group_by(BARRIO) %>%
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) %>%
left_join(barrios_area %>%
select(NOMBRE, area_km2), by = "NOMBRE") %>%
mutate(lum_por_km2 = pot_total / area_km2)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) %>%
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) %>%
left_join(barrios_area %>%
select(NOMBRE, area_km2), by = "NOMBRE") %>%
mutate(lum_por_km2 = pot_total / area_km2)
View(cat)
View(barrios_area)
View(barrios)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) %>%
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) %>%
left_join(barrios_area %>%
select(BARRIO, area_km2), by = "BARRIO") %>%
mutate(lum_por_km2 = pot_total / area_km2)
View(barrios_area)
names(barrios)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) |>
summarise(pot_total = sum(POTENCIA, na.rm = TRUE))
barrios_area <- barrios %>%
mutate(area_km2 = as.numeric(st_area(geometry)) / 1e6)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) |>
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) |>
left_join(barrios_area %>%
select(BARRIO, area_km2), by = "BARRIO") %>%
mutate(lum_por_km2 = pot_total / area_km2)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) |>
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) |>
left_join(barrios_area %>%
dplyr::select(BARRIO, area_km2), by = "BARRIO") %>%
mutate(lum_por_km2 = pot_total / area_km2)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) |>
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) |>
left_join(barrios_area %>%
dplyr::select(BARRIO, area_km2), by = "BARRIO") %>%
mutate(lum_por_km2 = pot_total / area_km2)
lum_area <- farolas_por_barrio %>%
group_by(BARRIO) |>
summarise(pot_total = sum(POTENCIA, na.rm = TRUE)) |>
st_join(barrios_area %>%
dplyr::select(BARRIO, area_km2), by = "BARRIO") %>%
mutate(lum_por_km2 = pot_total / area_km2)
View(lum_area)
lum_area <- lum_area %>%
mutate(lum_index_norm = (lum_por_km2 - min(lum_por_km2)) / (max(lum_por_km2) - min(lum_por_km2)))
View(lum_area)
View(lum_area)
pacman::p_load(tidyverse, skimr, DataExplorer, labelled,
stringr, dplyr, tidyr, forcats, haven,
memisc, DataExplorer, caret, FactoMineR,
factoextra, mice, missMDA, cowplot, cv,
janitor, pdftools, Gifi, olsrr, car, MVN,
sandwich, lmtest, boot, sf)
```{r}
-   **P11 (Global evaluations of safety):** Items P11_1 and P11_2 provide scalar ratings of perceived safety in the respondent’s **neighborhood** and **city**, respectively. These are highly relevant and were included in the composite index as they reflect summary judgments.
pacman::p_load(tidyverse, skimr, DataExplorer, labelled,
stringr, dplyr, tidyr, forcats, haven,
memisc, DataExplorer, caret, FactoMineR,
factoextra, mice, missMDA, cowplot, cv,
janitor, pdftools, Gifi, olsrr, car, MVN,
sandwich, lmtest, boot, sf)
# Converting values 98 and 99 into NA
pamplona_spss[pamplona_spss == 98 | pamplona_spss == 99 | pamplona_spss == 999] <- NA
### Dimensionality reduction: CATPCA
```{r}
# Total number of observations
n <- length(p112_sorted)
# Compute j and h for ideal quartiles (Tukey's rule)
j <- round((n / 4) + (5 / 12))
h <- (n / 4) + (5 / 12) - j
# Calculate the ideal lower and upper quartiles
qi2 <- (1 - h) * p112_sorted[j] + h * p112_sorted[j + 1]
qs2 <- (1 - h) * p112_sorted[n - j + 1] + h * p112_sorted[n - j]
# Print the ideal quartile values
cat("Cuartil inferior (qi):", qi2, "\n")
cat("Cuartil superior (qs):", qs2, "\n")
# Recode the variable p11_2 using the ideal quartiles
perception3$p11_2r_recoded_ideal <- cut(perception3$p11_2,
breaks = c(min(perception3$p11_2), qi2, qs2, max(perception3$p11_2)),
include.lowest = TRUE,
labels = c("Bajo", "Medio", "Alto"))
The dependent variable in this study aims to capture individuals’ subjective **perception of insecurity in public space**. This construct is multidimensional, encompassing not only how safe people feel in various contexts but also their emotional responses, behavioral adaptations, and evaluations of their local environment. Consequently, a composite approach is necessary to represent this latent dimension accurately.
# Display frequency table of the victimization index
table(pvictimisation_vars$victimized)
The dependent variable in this study aims to capture individuals’ subjective **perception of insecurity in public space**. This construct is multidimensional, encompassing not only how safe people feel in various contexts but also their emotional responses, behavioral adaptations, and evaluations of their local environment. Consequently, a composite approach is necessary to represent this latent dimension accurately.
# Synthetic index (with weights)
pesos <- c(
p5_1 = 4,      # Hurto >400€
p5_2 = 14,     # Robo con violencia
p5_3 = 14,     # Tirón
p5_4 = 16,     # Robo domicilio agravado
p5_5 = 8,      # Robo domicilio leve
p5_6 = 8,      # Robo móvil
p5_7 = 8,      # Robo dispositivo
p5_8 = 4,      # Estafa
p6_1 = 2.5,    # Lesiones mixtas (≈0.625y)
p6_2 = 4,      # Amenazas / coacciones
p6_3 = 10      # Agresión sexual
)
# Recode 1 (Yes) to 1 and 2 (No) to 0 in pvictimisation_vars
pvictimisation_vars[] <- lapply(pvictimisation_vars,
function(x) ifelse(x == 1, 1, 0))
# Ensure variables are numeric
pvictimisation_vars[] <- lapply(pvictimisation_vars,
function(x) as.numeric(as.character(x)))
# Apply the weights using sweep (more controlled than mapply in this case)
weighted_matrix <- sweep(as.matrix(pvictimisation_vars), 2, pesos[names(pvictimisation_vars)], `*`)
# Compute the weighted sum per row
pvictimisation_vars$victimized_w <- rowSums(weighted_matrix,
na.rm = TRUE)
fitord <- princals(perception2,
ordinal = T,
ndim = 3)  ## default is ordinal = TRUE
summary(fitord)
# Loadings plot or biplot
plot(fitord, "loadplot",
main = "Loadings Plot ABC Data")  ## aspect ratio = 1
View(agents)
pampre
# Suponiendo que el identificador es "id"
pampre <- pampre %>%
left_join( %>% select(id, p10_1, p10_2), by = "id")
pamplonaf
# Suponiendo que el identificador es "id"
pampre <- pampre %>%
left_join(pamplonaf %>% dplyr::select(id, p10_1, p10_2), by = "id")
View(pampre)
pampre %>%
left_join(pamplonaf %>% dplyr::select(gender, p10_1, p10_2), by = "gender")
pampre %>%
left_join(pamplonaf %>% dplyr::select(barrio, p10_1, p10_2), by = "barrio")
View(pampre)
all(pamplonaf$edad == pampre$edad)  # O cualquier otra variable común
# Adding p10_1 and p10_2
pampre$p10_1 <- pamplonaf$p10_1
pampre$p10_2 <- pamplonaf$p10_2
# Testing if they have the same order
all(pamplonaf$edad == pampre$edad)  # O cualquier otra variable común
# Adding p10_1 and p10_2
pampre$p10_1 <- pamplonaf$p10_1
pampre$p10_2 <- pamplonaf$p10_2
# creating IDs for traceability
pampre$id <- paste0("agent_", 1:nrow(pampre))
View(pampre)
rm(agents)
set.seed(123)  # Set seed for reproducibility
rm(agents)
set.seed(123)  # Set seed for reproducibility
# Prepare a sample of agents from the survey data
agents <- pampre %>%
mutate(p14z = as.numeric(p14z)) |>
dplyr::select(gender, nationality, victimized, barrio, gen_ins,
p7_8, age, p10_1, p10_2) |>
dplyr::mutate(barrio_res = case_when(  # Replace barrio IDs with descriptive names
barrio == "1" ~ "Iturrama",
barrio == "2" ~ "San Juan/Donibane",
barrio == "3" ~ "Casco Viejo/Alde Zaharra",
barrio == "4" ~ "Ensanche/Zabalgunea",
barrio == "5" ~ "Milagrosa-Arrosadia",
barrio == "6" ~ "Rochapea/Arrotxapea",
barrio == "7" ~ "Mendillorri",
barrio == "8" ~ "Ermitaga�a-Mendebaldea",
barrio == "9" ~ "San Jorge-Sanduzelai",
barrio == "10" ~ "Txantrea",
barrio == "11" ~ "Etxabakoitz",
barrio == "12" ~ "Lezkairu",
barrio == "13" ~ "Buztintxuri-Euntzetxiki"
),
barrio_res = as.factor(barrio_res)) |>
group_by(gender, barrio_res) %>% # Stratify by gender and neighborhood
sample_frac(0.2) |>  # Sample 20% of each group
ungroup() |>
dplyr::select(-barrio)
rm(agents)
set.seed(123)  # Set seed for reproducibility
# Prepare a sample of agents from the survey data
agents <- pampre %>%
mutate(p14z = as.numeric(p14z)) |>
dplyr::select(gender, nationality, victimized, barrio, gen_ins,
p7_8, age, p10_1, p10_2, id) |>
dplyr::mutate(barrio_res = case_when(  # Replace barrio IDs with descriptive names
barrio == "1" ~ "Iturrama",
barrio == "2" ~ "San Juan/Donibane",
barrio == "3" ~ "Casco Viejo/Alde Zaharra",
barrio == "4" ~ "Ensanche/Zabalgunea",
barrio == "5" ~ "Milagrosa-Arrosadia",
barrio == "6" ~ "Rochapea/Arrotxapea",
barrio == "7" ~ "Mendillorri",
barrio == "8" ~ "Ermitaga�a-Mendebaldea",
barrio == "9" ~ "San Jorge-Sanduzelai",
barrio == "10" ~ "Txantrea",
barrio == "11" ~ "Etxabakoitz",
barrio == "12" ~ "Lezkairu",
barrio == "13" ~ "Buztintxuri-Euntzetxiki"
),
barrio_res = as.factor(barrio_res)) |>
group_by(gender, barrio_res) %>% # Stratify by gender and neighborhood
sample_frac(0.2) |>  # Sample 20% of each group
ungroup() |>
dplyr::select(-barrio)
View(agents)
assign_effect <- function(var_name, condition_value, agent_var, agents_df, results_obj, n_agents, seed = 123) {
# Get index of the variable in results$t0
var_index <- which(names(results_obj$t0) == var_name)
# Extract and clean bootstrap values
bootstrap_vals <- na.omit(results_obj$t[, var_index])
# Set seed for reproducibility
set.seed(seed)
# Sample one value per agent (optional use)
sampled_effects <- sample(bootstrap_vals, size = n_agents, replace = TRUE)
# Assign effect only where condition is met
effect <- ifelse(
agents_df[[agent_var]] == condition_value,
sample(bootstrap_vals, size = nrow(agents_df), replace = TRUE),
0
)
return(effect)
}
n_agents <- 167
# Gender
agents$gender_effect <- assign_effect("gender", "1", "gender", agents, results, n_agents)
# Nationality
agents$nationality_effect <- assign_effect("nationality", "1", "nationality", agents, results, n_agents)
# Previous victimization
agents$victimized_effect <- assign_effect("victimized.L", "low", "victimized", agents, results, n_agents)
# P_7_8, encontrarse gente haciendo botellón
agents$p7_8_effect <- assign_effect("p7_8.L", "2", "p7_8", agents, results, n_agents)
# Final clean-up
agents_clean <- agents |>
dplyr::select(-age) |>
mutate(is_botellonero = case_when(is_botellonero == TRUE ~ "1", is_botellonero == FALSE ~ "0"))
# Creating a tibble for all categories
categorias <- tibble(p13b = factor(as.character(1:13),
levels = as.character(1:13)))
categorias1 <- tibble(p13a = factor(as.character(1:13),
levels = as.character(1:13)))
# Counting data
count_unsafe <- pampre |>
dplyr::select(p13b) |>
group_by(p13b) |>
summarise(casos_p13b = n(),
.groups = "drop")
count_safe <- pampre |>
dplyr::select(p13a) |>
group_by(p13a) |>
summarise(casos_p13a = n(),
.groups = "drop")
# Left_join to ensure all categories are present
votes_unsafe <- categorias |>
left_join(count_unsafe, by = "p13b") |>
mutate(casos_p13b = replace_na(casos_p13b, 0)) |>
arrange(p13b) |> pull()
votes_safe <- categorias1 |>
left_join(count_safe, by = "p13a") |>
mutate(casos_p13a = replace_na(casos_p13a, 0)) |>
arrange(p13a) |> pull()
# Normalize by total responses (or use raw counts if sample size constant)
total_votes_safe <- sum(votes_safe)
total_votes_unsafe <- sum(votes_unsafe)
safe_prop <- votes_safe / total_votes_safe
unsafe_prop <- votes_unsafe / total_votes_unsafe
# Composite score: higher = safer
composite_score <- safe_prop - unsafe_prop
# Create data frame for mapping
barrio_scores <- data.frame(
barrio_id = 1:13,
votes_safe = votes_safe,
votes_unsafe = votes_unsafe,
safe_prop = safe_prop,
unsafe_prop = unsafe_prop,
safety_score = composite_score
)
# Add the crime_index column to pamplonaf
crime_index <- sample(pamplonaf$crime_index,
size = 13)
barrio_scores <-  barrio_scores |>
dplyr::mutate(real_crime_proxy = safety_score * crime_index,
crime_index = crime_index,
barrio_id = case_when(  # Replace barrio IDs with descriptive names
barrio_id == "1" ~ "Iturrama",
barrio_id == "2" ~ "San Juan/Donibane",
barrio_id == "3" ~ "Casco Viejo/Alde Zaharra",
barrio_id == "4" ~ "Ensanche/Zabalgunea",
barrio_id == "5" ~ "Milagrosa-Arrosadia",
barrio_id == "6" ~ "Rochapea/Arrotxapea",
barrio_id == "7" ~ "Mendillorri",
barrio_id == "8" ~ "Ermitaga�a-Mendebaldea",
barrio_id == "9" ~ "San Jorge-Sanduzelai",
barrio_id == "10" ~ "Txantrea",
barrio_id == "11" ~ "Etxabakoitz",
barrio_id == "12" ~ "Lezkairu",
barrio_id == "13" ~ "Buztintxuri-Euntzetxiki"
))
barrio_clean <- barrio_scores |>
dplyr::select(barrio_id, safety_score, real_crime_proxy)
readr::write_csv(barrio_clean, "gama_barrio.csv")
View(agents)
agents <- agents %>%
rowwise() %>%
mutate(
darksens = if_all(c(p10_1, p10_2), ~ .x %in% c(3, 4)) ~ {
# Suma ponderada + error aleatorio normal
base <- (p10_1 * peso_p10_1 + p10_2 * peso_p10_2)
base + rnorm(1, mean = 0, sd = 0.05)  # ajusta el sd a tu criterio
},
.else = NA_real_
)
agents <- agents %>%
rowwise() %>%
mutate(
darksens = if_all(c(p10_1, p10_2), ~ .x %in% c(3, 4)) ~ {
# Suma ponderada + error aleatorio normal
base <- (p10_1 * weight_p10_1 + p10_2 * weight_p10_2)
base + rnorm(1, mean = 0, sd = 0.05)  # ajusta el sd a tu criterio
},
.else = NA_real_
)
agents <- agents %>%
rowwise() %>%
mutate(
darksens = if_all(c(p10_1, p10_2), ~ .x %in% c("3", "4")) ~ {
# Suma ponderada + error aleatorio normal
base <- (p10_1 * weight_p10_1 + p10_2 * weight_p10_2)
base + rnorm(1, mean = 0, sd = 0.05)  # ajusta el sd a tu criterio
},
.else = NA_real_
)
# Asegurarse de que p10_1 y p10_2 están en formato numérico
agents$p10_1 <- as.numeric(agents$p10_1)
agents$p10_2 <- as.numeric(agents$p10_2)
agents <- agents %>%
mutate(
darksens = ifelse(
p10_1 %in% c(3, 4) & p10_2 %in% c(3, 4),
p10_1 * weight_p10_1 + p10_2 * weight_p10_2 + rnorm(n(), 0, 0.05),
NA_real_
)
)
# Supón que estos son tus pesos de p10_1 y p10_2 en el componente gen_ins
weight_p10_1 <- -0.770
weight_p10_2 <- -0.752
# Supón que estos son tus pesos de p10_1 y p10_2 en el componente gen_ins
weight_p10_1 <- -0.770
weight_p10_2 <- -0.752
# Asegurarse de que p10_1 y p10_2 están en formato numérico
agents$p10_1 <- as.numeric(agents$p10_1)
agents$p10_2 <- as.numeric(agents$p10_2)
agents <- agents %>%
rowwise() %>%
mutate(
darksens = if_all(c(p10_1, p10_2), ~ .x %in% c("3", "4")) ~ {
# Suma ponderada + error aleatorio normal
base <- (p10_1 * weight_p10_1 + p10_2 * weight_p10_2)
base + rnorm(1, mean = 0, sd = 0.05)  # ajusta el sd a tu criterio
},
.else = NA_real_
)
# Supón que estos son tus pesos de p10_1 y p10_2 en el componente gen_ins
weight_p10_1 <- -0.770
weight_p10_2 <- -0.752
# Asegurarse de que p10_1 y p10_2 están en formato numérico
agents$p10_1 <- as.numeric(agents$p10_1)
agents$p10_2 <- as.numeric(agents$p10_2)
agents <- agents %>%
mutate(
darksens = ifelse(
p10_1 %in% c(3, 4) & p10_2 %in% c(3, 4),
p10_1 * weight_p10_1 + p10_2 * weight_p10_2 + rnorm(n(), 0, 0.05),
NA_real_
)
)
View(agents)
set.seed(123)  # Para reproducibilidad
# Pesos extraídos del CATPCA
weight_p10_1 <- 0.770
weight_p10_2 <- 0.752
# Conversión gradual + cálculo de sensibilidad con error
agents <- agents %>%
mutate(
# Convertir respuestas a escala gradual (0.0 a 1.0)
p10_1_scaled = case_when(
p10_1 == "4" ~ 0.0,
p10_1 == "3" ~ 0.33,
p10_1 == "2" ~ 0.66,
p10_1 == "1" ~ 1.0,
TRUE ~ NA_real_
),
p10_2_scaled = case_when(
p10_2 == "4" ~ 0.0,
p10_2 == "3" ~ 0.33,
p10_2 == "2" ~ 0.66,
p10_2 == "1" ~ 1.0,
TRUE ~ NA_real_
),
# Sensibilidad por cada ítem (con error individual)
darksens_b = p10_1_scaled * weight_p10_1 + rnorm(n(), 0, 0.025),
darksens_c = p10_2_scaled * weight_p10_2 + rnorm(n(), 0, 0.025),
# Sensibilidad total
darksens = darksens_b + darksens_c
)
View(agents)
hist(agents$darksens, breaks = 30, col = "steelblue", main = "Distribución de sensibilidad a la oscuridad")
hist(agents$darksens_b, breaks = 30, col = "steelblue", main = "Distribución de sensibilidad a la oscuridad")
View(agents)
set.seed(123)  # Set seed for reproducibility
# Loadings from CATPCA (originally negative; signs inverted to indicate increasing insecurity)
weight_p10_1 <- 0.770
weight_p10_2 <- 0.752
agents <- agents %>%
mutate(
# Recode p10_1 responses to a normalized scale from 0.0 (not afraid) to 1.0 (very afraid)
p10_1_scaled = case_when(
p10_1 == "4" ~ 0.0,
p10_1 == "3" ~ 0.33,
p10_1 == "2" ~ 0.66,
p10_1 == "1" ~ 1.0,
TRUE ~ NA_real_
),
# Recode p10_2 responses similarly
p10_2_scaled = case_when(
p10_2 == "4" ~ 0.0,
p10_2 == "3" ~ 0.33,
p10_2 == "2" ~ 0.66,
p10_2 == "1" ~ 1.0,
TRUE ~ NA_real_
),
# Compute item-specific sensitivity with added random noise (normally distributed error)
darksens_b = p10_1_scaled * weight_p10_1 + rnorm(n(), 0, 0.025),
darksens_c = p10_2_scaled * weight_p10_2 + rnorm(n(), 0, 0.025),
# Aggregate total sensitivity index
darksens = darksens_b + darksens_c
)
# Export to CSV, ready to use in GAMA
readr::write_csv(agents_clean, "gama_agents.csv")
# Export to CSV, ready to use in GAMA
readr::write_csv(agents, "gama_agents.csv")
