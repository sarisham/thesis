min_val <- min(perception_vars$indice_percepcion_camaras, na.rm = TRUE)
max_val <- max(perception_vars$indice_percepcion_camaras, na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$indice_percepcion_camaras - min_val) * (3 / (max_val - min_val))
# reondeo a enteros
perception_vars$cam_index <- round(perception_vars$cam_index)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$cam_index)
perception_vars |>
dplyr::select(-c("p10_4", "p10_5", "p10_6",
"composite_camera",
"normalized_p10_6", "indice_percepcion_camaras"))
perception_vars |>
dplyr::select(-c("p10_4", "p10_5", "p10_6",
"normalized_p10_6", "indice_percepcion_camaras"))
normalized_p10_6
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
perception_vars$normalized_p10_6
perception_vars$p10_6
# Convert factors or characters to numeric
perception_vars$p10_4 <- as.numeric(as.character(perception_vars$p10_4))
perception_vars$p10_5 <- as.numeric(as.character(perception_vars$p10_5))
perception_vars$p10_6 <- as.numeric(as.character(perception_vars$p10_6))
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
perception_vars$p10_6
perception_vars$normalized_p10_6
# Creamos la nueva variable compuesta
perception_vars$indice_percepcion_camaras <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Calculamos el valor mínimo y máximo de la nueva variable compuesta
min_val <- min(perception_vars$indice_percepcion_camaras, na.rm = TRUE)
max_val <- max(perception_vars$indice_percepcion_camaras, na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$indice_percepcion_camaras - min_val) * (3 / (max_val - min_val))
# reondeo a enteros
perception_vars$cam_index <- round(perception_vars$cam_index)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$cam_index)
perception_vars |>
dplyr::select(-c("p10_4", "p10_5", "p10_6",
"normalized_p10_6", "indice_percepcion_camaras"))
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
# Calculamos el valor mínimo y máximo de la nueva variable
min_val_seguridad <- min(perception_vars$seguridad_global_noche, na.rm = TRUE)
max_val_seguridad <- max(perception_vars$seguridad_global_noche, na.rm = TRUE)
min_val_seguridad
perception_vars$seguridad_global_noche
# Convert factors or characters to numeric
perception_vars$p10_1 <- as.numeric(as.character(perception_vars$p10_1))
perception_vars$p10_2 <- as.numeric(as.character(perception_vars$p10_2))
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
# Calculamos el valor mínimo y máximo de la nueva variable
min_val_seguridad <- min(perception_vars$seguridad_global_noche, na.rm = TRUE)
max_val_seguridad <- max(perception_vars$seguridad_global_noche, na.rm = TRUE)
perception_vars$seguridad_global_noche
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$night_security <- 1 + (perception_vars$seguridad_global_noche - min_val_seguridad) * (3 / (max_val_seguridad - min_val_seguridad))
summary(perception_vars$seguridad_global_noche_normalizado)
# Inspeccionamos la nueva variable normalizada
summary(perception_vars$seguridad_global_noche_normalizado)
min_val_seguridad
max_val_seguridad
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
# Calculamos el valor mínimo y máximo de la nueva variable
min_val_seguridad <- min(perception_vars$seguridad_global_noche, na.rm = TRUE)
max_val_seguridad <- max(perception_vars$seguridad_global_noche, na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$night_security <- 1 + (perception_vars$seguridad_global_noche - min_val_seguridad) * (3 / (max_val_seguridad - min_val_seguridad))
# Inspeccionamos la nueva variable normalizada
summary(perception_vars$seguridad_global_noche_normalizado)
View(perception_vars)
# Inspeccionamos la nueva variable normalizada
summary(perception_vars$night_security)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$night_security)
# Redondeamos los valores normalizados a enteros
perception_vars$night_security <- round(perception_vars$night_security)
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$night_security)
perception_vars
perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche"))
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
# Calculamos el valor mínimo y máximo de la nueva variable
min_val_seguridad <- min(perception_vars$seguridad_global_noche,
na.rm = TRUE)
max_val_seguridad <- max(perception_vars$seguridad_global_noche,
na.rm = TRUE)
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$seguridad_global_noche)
univariate_analysis(perception_vars)
# Suponiendo que las variables se llaman seguridad_barrio y seguridad_ciudad en el dataframe perception_vars
perception_vars$seguridad_global <- rowMeans(perception_vars[, c("p11_1", "p11_2")],
na.rm = TRUE)
# Inspeccionamos la nueva variable
summary(perception_vars$seguridad_global)
# Inspeccionamos la nueva variable
table(perception_vars$seguridad_global)
# Suponiendo que las variables se llaman seguridad_barrio y seguridad_ciudad en el dataframe perception_vars
perception_vars$global_security <- rowMeans(perception_vars[, c("p11_1", "p11_2")],
na.rm = TRUE)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
# Redondeamos los valores normalizados a enteros
perception_vars$global_security <- round(perception_vars$global_security)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
# Suponiendo que las variables se llaman seguridad_barrio y seguridad_ciudad en el dataframe perception_vars
perception_vars$global_security <- rowMeans(perception_vars[, c("p11_1", "p11_2")],
na.rm = TRUE)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
# Redondeamos los valores normalizados a enteros
perception_vars$global_security <- round(perception_vars$global_security)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche"))
perception_vars <- pamplonaf[, c("p7_1", "p7_2", "p7_3",
"p7_4", "p7_5", "p7_6",
"p7_7", "p7_8",
"p9",
"p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2", #la del barrio no estoy segura
"p12",
"p14")]
# Convert factors or characters to numeric
perception_vars$p10_1 <- as.numeric(as.character(perception_vars$p10_1))
perception_vars$p10_2 <- as.numeric(as.character(perception_vars$p10_2))
perception_vars$p10_4 <- as.numeric(as.character(perception_vars$p10_4))
perception_vars$p10_5 <- as.numeric(as.character(perception_vars$p10_5))
perception_vars$p10_6 <- as.numeric(as.character(perception_vars$p10_6))
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
# Creamos la nueva variable compuesta
perception_vars$indice_percepcion_camaras <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Calculamos el valor mínimo y máximo de la nueva variable compuesta
min_val <- min(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
max_val <- max(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$indice_percepcion_camaras - min_val) * (3 / (max_val - min_val))
# reondeo a enteros
perception_vars$cam_index <- round(perception_vars$cam_index)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$cam_index)
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
# Calculamos el valor mínimo y máximo de la nueva variable
min_val_seguridad <- min(perception_vars$seguridad_global_noche,
na.rm = TRUE)
max_val_seguridad <- max(perception_vars$seguridad_global_noche,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$night_security <- 1 + (perception_vars$seguridad_global_noche - min_val_seguridad) * (3 / (max_val_seguridad - min_val_seguridad))
# Redondeamos los valores normalizados a enteros
perception_vars$night_security <- round(perception_vars$night_security)
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$night_security)
# Suponiendo que las variables se llaman seguridad_barrio y seguridad_ciudad en el dataframe perception_vars
perception_vars$global_security <- rowMeans(perception_vars[, c("p11_1", "p11_2")],
na.rm = TRUE)
# Redondeamos los valores normalizados a enteros
perception_vars$global_security <- round(perception_vars$global_security)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche"))
perception_vars <- pamplonaf[, c("p7_2", "p7_3",
"p7_4", "p7_5", "p7_6",
"p7_7", "p7_8",
"p9",
"p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2", #la del barrio no estoy segura
"p12",
"p14")]
# Convert factors or characters to numeric
perception_vars$p10_1 <- as.numeric(as.character(perception_vars$p10_1))
perception_vars$p10_2 <- as.numeric(as.character(perception_vars$p10_2))
perception_vars$p10_4 <- as.numeric(as.character(perception_vars$p10_4))
perception_vars$p10_5 <- as.numeric(as.character(perception_vars$p10_5))
perception_vars$p10_6 <- as.numeric(as.character(perception_vars$p10_6))
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
# Creamos la nueva variable compuesta
perception_vars$indice_percepcion_camaras <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Calculamos el valor mínimo y máximo de la nueva variable compuesta
min_val <- min(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
max_val <- max(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$indice_percepcion_camaras - min_val) * (3 / (max_val - min_val))
# reondeo a enteros
perception_vars$cam_index <- round(perception_vars$cam_index)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$cam_index)
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
# Calculamos el valor mínimo y máximo de la nueva variable
min_val_seguridad <- min(perception_vars$seguridad_global_noche,
na.rm = TRUE)
max_val_seguridad <- max(perception_vars$seguridad_global_noche,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$night_security <- 1 + (perception_vars$seguridad_global_noche - min_val_seguridad) * (3 / (max_val_seguridad - min_val_seguridad))
# Redondeamos los valores normalizados a enteros
perception_vars$night_security <- round(perception_vars$night_security)
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$night_security)
# Suponiendo que las variables se llaman seguridad_barrio y seguridad_ciudad en el dataframe perception_vars
perception_vars$global_security <- rowMeans(perception_vars[, c("p11_1", "p11_2")],
na.rm = TRUE)
# Redondeamos los valores normalizados a enteros
perception_vars$global_security <- round(perception_vars$global_security)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche"))
# List of columns to be converted to factors
factor_columns <- c('p7_2', 'p7_3', 'p7_4',
'p7_5', 'p7_6', 'p7_7',
'p7_8',
'p12',
'cam_index', 'night_security')
# Convert selected columns to factors
perception_vars[factor_columns] <- lapply(perception_vars[factor_columns],
as.factor)
# Load necessary libraries
library(caret)
options(contrasts = c("contr.treatment", "contr.treatment"))
# Assuming data is in a data frame called df
# Dummy encoding, dropping the first category as the reference
percept_dummy <- model.matrix(~ . - 1, data = perception_vars)
# Convert the result to a data frame
percept_dummy <- as.data.frame(percept_dummy)
# Normalizing the data
df_normalized <- scale(percept_dummy)
df_normalized
# Calculate the correlation matrix
correlation_matrix <- cor(percept_dummy)
correlation_matrix
# Set a threshold for correlation; features with absolute correlation above this threshold are considered redundant
correlation_threshold <- 0.75  # Adjust this threshold as needed
# Find highly correlated features
highly_correlated <- findCorrelation(correlation_matrix, cutoff = correlation_threshold)
highly_correlated
# Remove highly correlated features
df_reduced <- percept_dummy[, -highly_correlated]
# Perform PCA
pca_result <- prcomp(df_reduced, center = TRUE, scale. = TRUE)
# View the proportion of variance explained by each principal component
summary(pca_result)
# Combinamos p10_1 y p10_2
perception_vars$seguridad_global_noche <- perception_vars$p10_1 + perception_vars$p10_2
perception_vars$seguridad_global_noche
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$seguridad_global_noche)
# Combinamos p10_1 y p10_2
perception_vars$night_security <- perception_vars$p10_1 + perception_vars$p10_2
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
# Creamos la nueva variable compuesta
perception_vars$indice_percepcion_camaras <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Inspeccionamos la nueva variable normalizada
table(perception_vars$indice_percepcion_camaras)
# Creamos la nueva variable compuesta
perception_vars$cam_index <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
perception_vars <- perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche"))
perception_vars
# List of columns to be converted to factors
factor_columns <- c('p7_2', 'p7_3', 'p7_4',
'p7_5', 'p7_6', 'p7_7',
'p7_8',
'p12')
# Convert selected columns to factors
perception_vars[factor_columns] <- lapply(perception_vars[factor_columns],
as.factor)
options(contrasts = c("contr.treatment", "contr.treatment"))
# Assuming data is in a data frame called df
# Dummy encoding, dropping the first category as the reference
percept_dummy <- model.matrix(~ . - 1, data = perception_vars)
# Convert the result to a data frame
percept_dummy <- as.data.frame(percept_dummy)
# Normalizing the data
df_normalized <- scale(percept_dummy)
# Calculate the correlation matrix
correlation_matrix <- cor(percept_dummy)
# Set a threshold for correlation; features with absolute correlation above this threshold are considered redundant
correlation_threshold <- 0.75  # Adjust this threshold as needed
# Find highly correlated features
highly_correlated <- findCorrelation(correlation_matrix, cutoff = correlation_threshold)
highly_correlated
# Remove highly correlated features
df_reduced <- percept_dummy[, -highly_correlated]
df_reduced
# Perform PCA
pca_result <- prcomp(df_reduced, center = TRUE, scale. = TRUE)
# View the proportion of variance explained by each principal component
summary(pca_result)
perception_vars <- perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche", "p14"))
perception_vars <- pamplonaf[, c("p7_2", "p7_3",
"p7_4", "p7_5", "p7_6",
"p7_7", "p7_8",
"p9",
"p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2", #la del barrio no estoy segura
"p12",
"p14")]
univariate_analysis(perception_vars)
# Convert factors or characters to numeric
perception_vars$p10_1 <- as.numeric(as.character(perception_vars$p10_1))
perception_vars$p10_2 <- as.numeric(as.character(perception_vars$p10_2))
perception_vars$p10_4 <- as.numeric(as.character(perception_vars$p10_4))
perception_vars$p10_5 <- as.numeric(as.character(perception_vars$p10_5))
perception_vars$p10_6 <- as.numeric(as.character(perception_vars$p10_6))
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
# Creamos la nueva variable compuesta. antes era indice_percepcion_camaras
perception_vars$cam_index <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Calculamos el valor mínimo y máximo de la nueva variable compuesta
min_val <- min(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
max_val <- max(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$indice_percepcion_camaras - min_val) * (3 / (max_val - min_val))
perception_vars <- pamplonaf[, c("p7_2", "p7_3",
"p7_4", "p7_5", "p7_6",
"p7_7", "p7_8",
"p9",
"p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2", #la del barrio no estoy segura
"p12",
"p14")]
univariate_analysis(perception_vars)
# Convert factors or characters to numeric
perception_vars$p10_1 <- as.numeric(as.character(perception_vars$p10_1))
perception_vars$p10_2 <- as.numeric(as.character(perception_vars$p10_2))
perception_vars$p10_4 <- as.numeric(as.character(perception_vars$p10_4))
perception_vars$p10_5 <- as.numeric(as.character(perception_vars$p10_5))
perception_vars$p10_6 <- as.numeric(as.character(perception_vars$p10_6))
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
# Creamos la nueva variable compuesta. antes era indice_percepcion_camaras
perception_vars$cam_index <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Calculamos el valor mínimo y máximo de la nueva variable compuesta
min_val <- min(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
max_val <- max(perception_vars$indice_percepcion_camaras,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$indice_percepcion_camaras - min_val) * (3 / (max_val - min_val))
# Calculamos el valor mínimo y máximo de la nueva variable compuesta
min_val <- min(perception_vars$cam_index,
na.rm = TRUE)
max_val <- max(perception_vars$cam_index,
na.rm = TRUE)
# Normalización min-max para ajustar el rango a [1, 4]
perception_vars$cam_index <- 1 + (perception_vars$cam_index - min_val) * (3 / (max_val - min_val))
# reondeo a enteros
perception_vars$cam_index <- round(perception_vars$cam_index)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$indice_percepcion_camaras)
# Inspeccionamos la nueva variable normalizada
table(perception_vars$cam_index)
# Normalizamos p10_6 para que los valores más altos sean negativos (indicando una percepción negativa)
perception_vars$normalized_p10_6 <- 5 - perception_vars$p10_6
# Creamos la nueva variable compuesta. antes era indice_percepcion_camaras
perception_vars$cam_index <- (perception_vars$p10_4 + perception_vars$p10_5) - perception_vars$normalized_p10_6
# Inspeccionamos la nueva variable normalizada
table(perception_vars$cam_index)
# Combinamos p10_1 y p10_2. antes era seguridad_global_noche
perception_vars$night_security <- perception_vars$p10_1 + perception_vars$p10_2
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$seguridad_global_noche)
# Combinamos p10_1 y p10_2. antes era seguridad_global_noche
perception_vars$night_security <- perception_vars$p10_1 + perception_vars$p10_2
# Inspeccionamos la nueva distribución de frecuencias
table(perception_vars$night_security)
# Suponiendo que las variables se llaman seguridad_barrio y seguridad_ciudad en el dataframe perception_vars
perception_vars$global_security <- rowMeans(perception_vars[, c("p11_1", "p11_2")],
na.rm = TRUE)
# Redondeamos los valores normalizados a enteros
perception_vars$global_security <- round(perception_vars$global_security)
# Inspeccionamos la nueva variable
table(perception_vars$global_security)
perception_vars <- perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "indice_percepcion_camaras",
"seguridad_global_noche", "p14"))
perception_vars
perception_vars <- perception_vars |>
dplyr::select(-c("p10_1", "p10_2",
"p10_4", "p10_5", "p10_6",
"p11_1", "p11_2",
"normalized_p10_6", "p14"))
perception_vars
# List of columns to be converted to factors
factor_columns <- c('p7_2', 'p7_3', 'p7_4',
'p7_5', 'p7_6', 'p7_7',
'p7_8',
'p12')
# Convert selected columns to factors
perception_vars[factor_columns] <- lapply(perception_vars[factor_columns],
as.factor)
options(contrasts = c("contr.treatment", "contr.treatment"))
# Assuming data is in a data frame called df
# Dummy encoding, dropping the first category as the reference
percept_dummy <- model.matrix(~ . - 1, data = perception_vars)
# Convert the result to a data frame
percept_dummy <- as.data.frame(percept_dummy)
# Normalizing the data
df_normalized <- scale(percept_dummy)
# Calculate the correlation matrix
correlation_matrix <- cor(percept_dummy)
# Set a threshold for correlation; features with absolute correlation above this threshold are considered redundant
correlation_threshold <- 0.75  # Adjust this threshold as needed
correlation_matrix
# Find highly correlated features
highly_correlated <- findCorrelation(correlation_matrix, cutoff = correlation_threshold)
highly_correlated
# Remove highly correlated features
df_reduced <- percept_dummy[, -highly_correlated]
df_reduced
# Perform PCA
pca_result <- prcomp(df_reduced, center = TRUE, scale. = TRUE)
# View the proportion of variance explained by each principal component
summary(pca_result)
# Example in R
dist_matrix <- dist(pca_result$x[,1:10]) # Distance matrix on the first 10 PCs
hc <- hclust(dist_matrix, method = "ward.D2") # Hierarchical clustering
plot(hc) # Dendrogram
# Assuming the use of the car package
# install.packages("car")
library(car)
vif_model <- lm(target ~ ., data = df_reduced)
# Sparse PCA example in R
# install.packages("elasticnet")
library(elasticnet)
spca_result <- spca(df_reduced, K = 10, sparse = "varnum", para = 5)
df_reduced
spca_result <- spca(df_reduced, K = 10, sparse = "varnum", para = 5)
df_reduced$dummy_target <- rnorm(nrow(df_reduced))  # Creating a dummy target
# Fit a model to check for VIF
vif_model <- lm(dummy_target ~ ., data = df_reduced)
vif(vif_model)
# Sparse PCA example in R
# install.packages("elasticnet")
library(elasticnet)
spca_result <- spca(df_reduced, K = 10, sparse = "varnum", para = 5)
# Assuming `pca_result` is the object returned from prcomp or a similar PCA function
explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2)
# Create the scree plot
plot(explained_variance, type = "b", xlab = "Principal Component", ylab = "Proportion of Variance Explained", main = "Scree Plot")
# Adding cumulative variance line
cumulative_variance <- cumsum(explained_variance)
lines(cumulative_variance, type = "b", col = "red", lty = 2)
# Adding cumulative variance line
cumulative_variance <- cumsum(explained_variance)
cumulative_variance
# Extract loadings
loadings <- pca_result$rotation
# View loadings for the first few components
print(loadings[, 1:5])
# Identify significant loadings
threshold <- 0.5  # This threshold is arbitrary; choose based on context
significant_loadings <- loadings[apply(abs(loadings), 1, max) > threshold, ]
print(significant_loadings)
library(remotes)
install.packages("Homebrew")
install.packages("homebrew")
install.packages("MacPorts")
library(xcrun)
install.packages("xcrun")
